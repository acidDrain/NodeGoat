name: E2E Test
on: [push, pull_request]

env:
  MONGODB_URI: mongodb://localhost:27017/nodegoat

jobs:
  e2e-test:
    name: Node.js
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: ["14.x"]

    services:
      # Label used to access the service container
      mongo:
        # Docker Hub image
        image: mongo:4.0
        ports:
          # Opens tcp port 6379 on the host and service container
          - 27017:27017
        # sh -c "until nc -z -w 2 mongo 27017 && echo 'mongo is ready for connections' && node artifacts/db-reset.js && npm start; do sleep 2; done"

    steps:
      - name: Checkout https://github.com/${{ github.repository }}@${{ github.ref }}
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Use cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node${{ matrix.node-version }}-E2E-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: |
          npm ci
          npm run cy:verify

      - name: Wait for MongoDB
        # Wait for the mongodb container to be ready
        run: timeout 60s bash -c 'until nc -z -w 2 localhost 27017 && echo MongoDB ready; do sleep 2; done'

      - name: Seed MongoDB
        # Runs a script that creates a mongo client, populates
        # the mongo with data
        run: npm run db:seed
        # Environment variable used by the app in general
        env:
          # The hostname used to communicate with the Redis service container
          MONGODB_URI: mongodb://localhost:27017/nodegoat

      - name: Run E2E test suite
        run: |
          NODE_ENV=test npm start -- --silent &
          npm run test:ci
